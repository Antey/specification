TODO:
1) RSA ключики. Пока забьём на RSA ключи. Просто проверяем SAS WWN.  - done
2) Создание диска - done
3) Отмена запроса - done
4) Пинг к существующему ВД - done


Cirrostratus protocol

Данный документ описывает протокол доступа через Ethernet к виртуальным жёстким дискам

1. Введение.
    Cirrostratus используется для предоставления базового уровня механизма вызова удалённых процедур
    для взаимодействия между клиентом и Cirrostratus -сервером.
    Сервер принимает команду и генерирует ответ, основываясь на коде команды.
    
    Этот документ описывает формат Cirrostratus -заголовка и набор существующих команд.
    Для всех значений, для которых имеется порядок следования байт, используется сетевой порядок следования.
    Зарезервированные поля  должны устанавливаться  значением, равным 0, во всех сообщениях.
    
    Каждое сообщение содержит в себе заголовок, за которым следует поле аргумента.
    Формат данного поля определяется кодом команды, указанным в заголовке.
    
2. Формат Cirrostatus-заголовка

    
Ethernet package = Dest mac | Sourse mac | Type of protocol | Cirrostratus header | Data

Cirrostratus header + Data = 1500 - 10000 bytes

Cirrostratus header = [(Ver - 4 bit) | (Flag - 4 bit)] | [Error - 8 bit] | [Command - 8 bit]
Command header = ...?

 
       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    0 |  Ver  | Flags |   Error       |    Command    |         Tag      
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    4 |                       Tag                     |         Arg       
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    8 |                       Arg                     |   
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     
2.1 Ver (Version)
    Поле версии указывает на формат заголовка и на набор поддерживаемых кодов команд.
    Все последующие версии протокола должны включать это поле в том же самом месте.
    Данный документ описывает версию 0. Коды команд, поддерживаемые этой версией описаны далее.
      
2.2 Flags
    Поле флагов содержит битовые флаги, определённые следующим образом:
    
    +-+-+-+-+
    |R|E|Z|Z|
    +-+-+-+-+
    
    Бит R устанавливается в случае, если передаваемое сообщение является ответом.
    Бит E устанавливается сервером в ответном сообщении, если команда,
    посланная клиентом в сообщении вызвала ошибку. Клиент устанавливает данный флаг,
    если при передаче сервером данных были потеряны или некорректно переданы некоторые пакеты.
    Z - зарезервированные поля. Должны быть забиты нулями.

2.3 Error
    Если флаг E установлен то в данном поле содержится код ошибки. Допустимые значения кодов ошибок:
    
    Error 1: Unrecognized command code        Сервер не по знает код команды, указанной в поле Command запроса.
    Error 2: Bad argument parameter           В поле Arg содержится недопустимое значение.
    Error 3: Device unavailable               Сервер не может выполнить запрошенную команду, так как устройство недоступно.
    Error 4: Unsupported version              Версия, указанная в запросе, не поддерживается сервером.
    Error 5: Wrong tag                        Нарушена очерёдность пакетов или некоторые пакеты потеряны.
    Error 6: Acces denied                     Доступ клиенту с данным SAS WWN-идентификатором запрещён.

2.4 Command
    Поле команды содержит код команды для данного сообщения.
    В первой версии протокола определены следующие коды команд:
    
    Command 0:        Команда доступа к диску, экспорта и прочее.
    Command 1:        Пока только для создания диска.

2.5 Tag
    Поле тэг позволяет клиенту связать ответ с соответствующей командой запроса.
    Является идентификатором (номером) запроса. Значение данного поля копируется сервером в ответное сообщение.
    
2.6 Arg
    Содержимое поля аргументов зависит от значения кода команды, содержащегося в соответствующем поле.


3.  Коды команд

3.1 Command 0, команда доступа к диску

	Command 0 используется для работы с существующими виртуальными дисками (чтение, запись).
	Поле Arg заполняется следующим образом:
       
       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    0 |    AFlags     |   ACommand    |             ACounter          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    4 |                             Data   
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

3.1.1 AFlags
	Поле флагов имеет следующую структуру:
   
	+-+-+-+-+-+-+-+-+
	|W|Z|Z|Z|Z|Z|Z|Z|
	+-+-+-+-+-+-+-+-+

	Флаг W устанавливается если запрашивается запись и сбрасывается, если запрашивается чтение.
	Биты Z являются зарезервированными и должны быть сброшены в 0.

3.1.2 ACommand
        Поле команды может принимать следующие значения:
        
        ACommand 0:            Запрос на доступ к участку диска. Конфигурация номера диска, смещения в нём и размера блока данных.
        ACommand 1:            Пересылка данных
        ACommand 2:            Подтверждение, что сервер слушает (Окей я готов пересылай данные)
 
3.1.3 ACounter
		Поле счётчика, содержит номер фрагмента данных. 
		Применяется для разбиения/сборки большого блока данных при записи или чтении с виртуального диска. 
		Каждый пакет нумеруется при разбиении перед передачей, 
		после приёма фрагменты собираются в единый блок по порядку с использованием поля AFrag.
		

3.1.4 Data
        Данные формируются в зависимости от сценария взаимодействия см.ниже
        SAS WWN = 8 byte
        смещение = 8 byte(64 - битное целое)
        размер данных = 8 byte(64 - битное целое)

        Если Command 0, Arg имеет следующие значения:
        Arg = [AFlags - 8 bit] | [AComand - 8 bit] | [Data]
        AFlags - чтение | запись
        AComand - имеет следующие значения:
        ACommand 0:                           	 Посылка конфигурации
        ACommand 1:                              Пересылка данных
        ACommand 2:                              Подтверждение, что сервер слушает (Окей я готов пересылай данные)


Чтение:
    1.  Клиент посылает пакет серверу следующего содержания:
        Cirrostratus header = [(Ver = текущая версия) | (Flag  = запрос)] | [Error = 0] | [Command = 0] | [Tag] | [Arg]
        Arg = [AFlags = чтение] | [AComand = 0] | [ACounter = 0] | [Data] 
        Data = {[SAS WWN] | [смещение] | [ размер данных ]} - конфигурация

    2. Сервер принимает пакет с конфигурацией.
    3. Сервер проверяет наличие SAS WWN клиента в списке SAS WWN-идентификаторов, с которых может производиться доступ к указанному диску.
        Если SAS WWN-идентификатор в списке не присутствует, клиенту посылается сообщение следующего содержания:
        Cirrostratus header = [(Ver = текущая версия) | (Flag  = ответ)] | [Error = 6]

    4. Пока не отсылается всё или не появляется ошибка, происходит следующее:
        1.  Сервер шлёт пакеты следующего содержания:
            Cirrostratus header = [(Ver = текущая версия) | (Flag  = ответ)] | [Error = 0] | [Command = 0] | [Tag] |[Arg]
            Arg = [AFlags - чтение] | [AComand = 1] | [ACounter = {ACounter предыдущего пакета + 1}] | [Data] 
            Data = {данные} 
        2. Клиент получает данные. Если тэг не соответствует ожидаемому выдаёт ошибку.

Ошибка обрабатывается следующим образом:
    0.  Клиент никак не обрабатывает приходящие с сервера пакеты которые не соответствуют ожидаемому Tag'у.
    1.  Клиент посылает пакет серверу следующего содержания:
        Cirrostratus header = [(Ver = текущая версия) | (Flag  = ошибка)] | [Error = 5] | [Command = 0] | [Tag] | [Arg]
		Arg = [AFlags - чтение] | [AComand = 1] [ACounter = {номер пакета который не получил  клиент}]
    2. Сервер находит по номеру пакета нужные данные (можно посчитать исходя из количества пересылаемых данных в каждом пакете)
    4. Повторяется пункт 4. чтения. (ACounter и Data заменяются на соответствующие)

Запись:        
    1.  Клиент посылает пакет серверу следующего содержания:
        Cirrostratus header = [(Ver = текущая версия) | (Flag  = запрос)] | [Error = 0] | [Command = 0] | [Tag] | [Arg]
        Arg = [AFlags = запись] | [AComand = 0] | [ACounter = 0] | [Data] 
        Data = {[SAS WWN] | [смещение] | [ размер данных ]} - конфигурация
    2. Сервер принимает пакет с конфигурацией.
    3. Сервер проверяет наличие SAS WWN клиента в списке SAS WWN-идентификаторов, с которых может производиться доступ к указанному диску.
        Если SAS WWN-идентификатор в списке не присутствует, клиенту посылается сообщение следующего содержания:
        Cirrostratus header = [(Ver = текущая версия) | (Flag  = ответ)] | [Error = 6]
    4. Сервер шлёт подтверждение что есть доступ и он готов для записи.
        Cirrostratus header = [(Ver = текущая версия) | (Flag  = запрос)] | [Error = 0] | [Command = 0] | [Tag] | [Arg]
            Arg = [AFlags - запись] | [AComand = 2] 
    5. Клиент получает подтверждение.
    6. Пока не отсылается всё или не появляется ошибка, происходит следующее:
        1.  Клиент шлёт пакеты следующего содержания:
            Cirrostratus header = [(Ver = текущая версия) | (Flag  = ответ)] | [Error = 0] | [Command = 0] | [Tag] | [Arg]
            Arg = [AFlags - запись] | [AComand = 1] | [ACounter = {ACounter предыдущего пакета + 1}] | [Data] 
            Data = {данные} 
        2. Сервер получает данные и записывает их куда надо. Если тэг не соответствует ожидаемому, выдаёт ошибку.

Ошибка обрабатывается следующим образом:
    0.  Сервер никак не обрабатывает приходящие с клиента пакеты которые не соответствуют ожидаемому Tag'у.
    1.  Сервер посылает пакет клиенту следующего содержания:
        Cirrostratus header = [(Ver = текущая версия) | (Flag  = ошибка)] | [Error = 5] | [Command = 0] | [Tag] | [Arg]
		Arg = [AFlags - чтение] | [AComand = 1] | [ACounter = {номер пакета который не получил  сервер}] 
    2. Клиент находит по номеру пакета нужные данные (можно посчитать исходя из количества пересылаемых данных в каждом пакете)
    4. Повторяется пункт 4. записи. (ACounter и Data заменяются на соответствующие)

3.2    Command 1

        Command 1 используется для взаимодействия клиента с распределенным хранилищем.
        Поле Arg заполняется следующим образом:
        
       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    0 |   ACommand    |    AError     |             Data       
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    4 |                           Data    
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

3.2.1 ACommand
        Поле команды может принимать следующие значения:
        
        ACommand 0:            Команда создания диска.
        
3.2.2 AError
        Поле ошибки может принимать следующие значения:
        
        AError 0:                  Всё хорошо
        AError 1:                  Ошибка при выделении диска

3.2.3 Data    
        Данные формируются в зависимости от сценария взаимодействия (см.ниже)
        SAS WWN = 8 byte
        смещение = 8 byte (64 - битное целое)
        размер данных/диска = 8 byte (64 - битное целое)

Создание диска:

Чтение:
    1.  Клиент посылает пакет серверу следующего содержания:
        Cirrostratus header = [(Ver = текущая версия) | (Flag  = запрос)] | [Error = 0] | [Command = 1] | [Tag] | [Arg]
        Arg =  [AComand = 0] | [AError = 0] [Data] 
        Data = {[SAS WWN - клиента] | [ размер диска ]} - конфигурация
    2. Сервер принимает пакет с конфигурацией.
    3. Сервер проверяет наличие SAS WWN клиента в списке SAS WWN-идентификаторов, с которых может производиться доступ к указанному диску.
        Если SAS WWN-идентификатор в списке не присутствует, клиенту посылается сообщение следующего содержания:
        Cirrostratus header = [(Ver = текущая версия) | (Flag  = ответ)] | [Error = 6]

    4. Если не получилось выделить диск, клиенту шлётся сообщение:        
        Cirrostratus header = [(Ver = текущая версия) | (Flag  = ответ)] | [Error = 0] | [Command = 1] | [Tag] | [Arg]
        Arg =  [AComand = 0] | [AError = 1]

    5. Если всё хорошо, сервер посылает следующий пакет клиенту:
        Cirrostratus header = [(Ver = текущая версия) | (Flag  = ответ)] | [Error = 0] | [Command = 1] | [Tag] | [Arg]
        Arg =  [AComand = 0] | [AError = 0]  [Data] 
        Data = {[SAS WWN - выделенного диска] | [ размер диска ]} - конфигурация

	Ошибка обрабатывается следующим образом: - ? думаю никак


3.3 Command 2, команда пинга
	Command 2 используется для проверки наличия/работоспособности виртуальных дисков.
	Поле Arg заполняется следующим образом:

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    0 |                          SAS WWN  
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    4                            SAS WWN                              |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       
	При запросе бит R в поле Flags (описано ранее) сбрасывается в 0.
	При ответе SAS WWN копируется из запроса, бит R устанавливается, и отсылается ответное сообщение.
		
3.3.1 SAS WWN       
		SAS WWN является уникальным идентификатором виртуального диска, к которому производится пинг,
		представляет собой 8-байтное число.

3.3.2 Формат сообщения-запроса.
		Cirrostratus header = [(Ver = текущая версия) | (Flag  = 0000)] | [Error = 0] | [Command = 2] | [Tag] | [Arg]
		Arg =  [SAS WWN]
	
3.3.3 Формат сообщения-ответа от сервера.
		В случае работоспособности диска с указанным SAS WWN сервер посылает ответное сообщение следующего формата:
		Cirrostratus header = [(Ver = текущая версия) | (Flag  = 1000)] | [Error = 0] | [Command = 2] | [Tag] | [Arg]
		Arg =  [SAS WWN]
		
3.3.4 Обработка ошибки
		В случае отсутствия диска с указанным SAS WWN сервер посылает ответное сообщение следующего формата:
		Cirrostratus header = [(Ver = текущая версия) | (Flag  = 1100)] | [Error = 3] | [Command = 2] | [Tag] | [Arg]
		Arg =  [SAS WWN]
		
		
3.4 Command 3, команда отмены запроса
	Command 3 используется для отмены запроса на чтение/запись/создание виртуального диска, посланного серверу ранее.
	Поле Arg заполняется следующим образом:
	
	   0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    0 |                           ACancelTag                          |     
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	
3.4.1 ACancelTag
		ACancelTag - представляет собой Tag запроса (сообщения), который нам нужно отменить. 
		Так как Tag является идентификаторм запроса, то по нему мы можем однозначно определить отменяемый запрос.

3.4.2 Формат сообщения.
		Cirrostratus header = [(Ver = текущая версия) | (Flag  = 0000)] | [Error = 0] | [Command = 3] | [Tag] | [Arg]
		Arg = [ACancelTag = {Tag запроса, который требуется отменить}]
	
4.3.3 Формат сообщения-ответа от сервера.
		В случае получения сервером команды отмены ранее посланого запроса, он прекращает его обрабатывать 
		и посылать ответные сообщения на тот запрос. После этого сервер посылает клиенту ответное сообщение-подтверждение
		следующего формата:
		Cirrostratus header = [(Ver = текущая версия) | (Flag  = 1000)] | [Error = 0] | [Command = 3] | [Tag] | [Arg]
		Arg =  [ACancelTag]
		
4.3.4 Обработка ошибки
		В случае невозможности отменить запрос с полем Tag, равным содержимому поля ACancelTag из запроса-отмены 
		(например, по причине того, что такого запроса просто не существует), сервер посылает клиенту сообщение 
		об ошибке следующего содержания:
		Cirrostratus header = [(Ver = текущая версия) | (Flag  = 1100)] | [Error = 2] | [Command = 3] | [Tag] | [Arg]
		Arg =  [ACancelTag]
		


